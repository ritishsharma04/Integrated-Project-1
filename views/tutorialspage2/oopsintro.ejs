<!--  -->
<!-- code starts here -->
<div class="container mt-5 pt-2">
    <h1 class="h1">What Is OOPs?</h1>
    <p class="">In this series of articles, we will learn about the basics of OOPs. Object-Oriented Programming is a
        paradigm that provides many concepts, such as inheritance, data binding, polymorphism, etc. The programming
        paradigm where everything is represented as an object is known as a truly object-oriented programming language.
    </p>

    <div class="mt-4">
        <h2 class="h1" id="why-oops">Why OOPS?</h2>
        <p>Object-Oriented Programming (OOP) was introduced to address the limitations of procedural programming by
            providing a more efficient way to manage complex software development.</p>
        <p>Procedural programming, also known as imperative programming, was widely used before the advent of
            object-oriented programming (OOP). While it was effective for small to medium-sized applications, several
            significant problems emerged when dealing with more complex systems:</p>

        <strong>1. Code Reusability and Redundancy:</strong>
        <p><strong>Problem:</strong> In procedural programming, code reusability is limited. Functions and procedures
            often have to be rewritten or copied to different parts of the program, leading to redundancy.</p>
        <p><strong>Impact:</strong> This redundancy makes the codebase larger and harder to maintain, as changes have to
            be propagated to all copies of the code.</p>

        <strong>2. Maintenance and Scalability:</strong>
        <p><strong>Problem:</strong> As the size of the application grows, maintaining and scaling procedural code
            becomes challenging.</p>
        <p><strong>Impact:</strong> This lack of scalability hinders the development process, especially for large-scale
            software projects, as it becomes more time-consuming and error-prone to modify the code.</p>

        <strong>3. Data Encapsulation and Security:</strong>
        <p><strong>Problem:</strong> Procedural programming does not inherently support data encapsulation.</p>
        <p><strong>Impact:</strong> The lack of encapsulation makes it harder to protect data integrity and can result
            in more bugs.</p>

        <strong>4. Flexibility and Extensibility:</strong>
        <p><strong>Problem:</strong> Procedural programming is less flexible when it comes to extending existing code.
        </p>
        <p><strong>Impact:</strong> This rigidity makes it challenging to adapt to new requirements or integrate new
            functionalities without causing disruptions.</p>

        <p>Here are several key reasons why OOP was needed:</p>
        <ul>
            <li><strong>1. Modularity and Troubleshooting:</strong> OOP allows developers to break down complex problems
                into smaller, more manageable modules called objects.</li>
            <li><strong>2. Reusability of Code:</strong> One of the significant advantages of OOP is code reusability
                through inheritance.</li>
            <li><strong>3. Scalability and Maintainability:</strong> OOP makes it easier to scale and maintain software.
            </li>
            <li><strong>4. Flexibility Through Polymorphism:</strong> OOP supports polymorphism, allowing objects to be
                treated as instances of their parent class.</li>
        </ul>
    </div>
    <div class="container">
        <h1 class="h1 mb-4">Objects and Classes</h1>

        <h2 class="h4 mb-2">What are Classes?</h2>
        <p class="mb-4">
            A class in Object-Oriented Programming (OOP) is a blueprint or template that defines the attributes (data)
            and methods (functions) that the objects created from the class will have. It encapsulates the data for the
            object and the methods to manipulate that data. Classes are fundamental to OOP as they enable the creation
            of modular and reusable code.
        </p>

        <h2 class="h4 mb-2">Key Components of a Class:</h2>
        <ul class="list-unstyled mb-4">
            <li class="mb-2">
                <strong>Attributes:</strong> These are the variables that hold the state of the object. They are
                sometimes referred to as properties or fields.
            </li>
            <li>
                <strong>Methods:</strong> These are the functions that define the behavior of the objects created from
                the class. Methods can manipulate the object's attributes and perform operations.
            </li>
        </ul>

        <h2 class="h4 mb-2">What are Objects?</h2>
        <p class="mb-4">
            An object is an instance of a class. When a class is defined, no memory is allocated until an object of that
            class is created. Objects are the actual entities that hold the data and the functionality defined in the
            class. Each object has its own copy of the attributes defined in the class and can use the methods defined
            in the class to manipulate those attributes.
        </p>

        <p>
            For Example, a student name Rahul is Real-World entity, in programming terms its an Object.
        </p>

        <p>
            what defines an object or how would an object look like? There must be a bluePrint i.e Class.
        </p>
    </div>


<div class="container">
    <h1 class="h1 mb-4">Attributes and Behaviours</h1>
    
    <h2 class="h4 mb-3">Attributes</h2>
    <p class="mb-3">
        Attributes, also known as properties or fields, are variables that hold data specific to an object. They define the state of an object and are typically represented as nouns. Attributes are fundamental in distinguishing one object from another within the same class.
    </p>
    <p class="mb-3">
        Example: Consider a Student class. The attributes could include:
    </p>
    <ul class="list-unstyled mb-4">
        <li>- Name: The student's name</li>
        <li>- ID: The student's identification number</li>
        <li>- Age: The student's age</li>
        <li>- Marks: The student's marks</li>
    </ul>

    <h2 class="h4 mb-3">Behaviors</h2>
    <p class="mb-3">
        Behaviors, also known as methods or functions, are actions that objects can perform. They define the functionality of the class and are typically represented as verbs. Behaviors operate on the attributes of the class to perform specific tasks.
    </p>
    <p class="mb-3">
        Example: Continuing with the Student class, behaviors could include:
    </p>
    <ul class="list-unstyled mb-4">
        <li>- Display: Show student details</li>
        <li>- Update Marks: Change the student's marks</li>
        <li>- Calculate Average: Compute the average of the student's marks</li>
    </ul>

    <h2 class="h4 mb-3">Conclusion</h2>
    <ul class="list-unstyled mb-4">
        <li>- Object Oriented Programming (OOP) is a programming paradigm focused on solving real world Problems</li>
        <li>- The identification of code objects similar to real world objects and structuring code using classes and objects signifies the use of OOP principle.</li>
        <li>- Classes and Objects serves as a fundamental building blocks of the OOP concept.</li>
        <li>- Java , C++, Javascript are some major object oriented language.</li>
    </ul>
</div>


<!-- <html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Java Student Class</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Roboto', sans-serif;
        }
        .code-block {
            background-color: #343a40;
            color: #f8f9fa;
            padding: 20px;
            border-radius: 5px;
            font-family: 'Courier New', Courier, monospace;
        }
        .code-block pre {
            margin: 0;
        }
    </style> -->
<!-- </head> -->
<!-- <body> -->
    <div class="container mt-5 bg-dark text-white">
        <div class="code-block">
            <pre>
public class Student {
    private String name;
    private int id;
    private int age;
    private int nos;

    // Default constructor
    public Student() {
        this.name = "Unknown";
        this.id = 0;
        this.age = 0;
        this.nos = 0;
    }

    // No-argument constructor
    public Student() {
        this.name = "Default Name";
        this.id = 100;
        this.age = 18;
        this.nos = 7;
    }

    // Parameterized constructor
    public Student(String name, int id, int age, int nos) {
        this.name = name;
        this.id = id;
        this.age = age;
        this.nos = nos;
    }

    // Copy constructor
    public Student(Student student) {
        this.name = student.name;
        this.id = student.id;
        this.age = student.age;
        this.nos = student.nos;
    }

    // Display method
    public void display() {
        System.out.println("Name: " + name);
        System.out.println("ID: " + id);
        System.out.println("Age: " + age);
        System.out.println("Number of subjects: " + nos);
    }

    public static void main(String[] args) {
        // Using default constructor
        Student student1 = new Student();
        student1.display();

        // Using parameterized constructor
        Student student2 = new Student("Yash", 101, 20, 5);
        student2.display();

        // Using copy constructor
        Student student3 = new Student(student2);
        student3.display();
    }
}
            </pre>
        </div>
    </div>

    <!-- code ends here -->