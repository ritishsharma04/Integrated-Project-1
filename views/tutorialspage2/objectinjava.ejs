<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>java(oops)</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <!-- Icon Font Stylesheet -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css" rel="stylesheet">
</head>
<body>
    <%- include('../includes/nav.ejs') %>
    <%- include('../includes/subnav.ejs') %>
    <div class="container-fluid">
        <div class="row">
            
            <div class="menubox col col-2 border border-2 p-3" style="height: 600px; overflow: auto;">
                <%- include('./javanav.ejs') %>
            </div>
            <div class="col  border border-2" style="height: 600px; overflow: auto;">
                <!-- code starts here -->
                <div class="container-fluid  min-vh-100 p-4">
                    <h3 class="h1 mt-5 pt-2">Object & Class</h3>
                    <p>An object can be any real-world entity such as a book, cupboard, pen, paper, fan, etc. While a class is a group of objects with similar properties.</p>
                    <p>An object is an instance of a class while a class is a blueprint from which we create objects.</p>
                
                    <h4>i. Different ways to create objects:</h4>
                    <p>Letâ€™s see how we can create a class and from it, create an object.</p>
                    <p><strong>Syntax to create object from class:</strong></p>
                    <pre class="bg-black text-white p-3 border rounded"><code>className objectName = new className();</code></pre>
                
                    <h5>Example:</h5>
                    <pre class="bg-black text-white p-3 border rounded"><code>public class Example1 {
String name = "Rajesh";
int age = 20;
                
public static void main(String[] args) {
    Example1 ex = new Example1();
    System.out.println("Name: " + ex.name);
    System.out.println("Age: " + ex.age);
    }
}</code></pre>
                    <p><strong>Output:</strong></p>
                    <pre class="bg-black text-white p-3 border rounded"><code>Name: Rajesh
Age: 20</code></pre>
                
                    <p>In the above example, we create a class using the class keyword. We have named our class Example1. Now in order to create an object from Example1 class we will use the new keyword. The new keyword allocates heap memory to the object at runtime.</p>
                
                    <h5>Multiple Instances:</h5>
                    <p>We can even create multiple instances of the same class.</p>
                    <pre class="bg-black text-white p-3 border rounded"><code>public class Example2 {
String name = "Rajesh";
int age = 20;
public static void main(String[] args) {
    Example1 ex1 = new Example1();
    Example2 ex2 = new Example2();
    System.out.println("Name: " + ex1.name);
    System.out.println("Age: " + ex2.age);
    }
}</code></pre>
                    <p><strong>Output:</strong></p>
                    <pre class="bg-black text-white p-3 border rounded">
<code>
Name: Rajesh
Age: 20</code></pre>
                
                    <h5>Organizing Code:</h5>
                    <p>Finally, we can program our code in one class and call it as an object in the main() method of another class. This helps us organize our code thus making it easy to use, detect errors, modify, etc.</p>
                
                    <h5>Exam:</h5>
                    <pre class="bg-black text-white p-3 border rounded"><code>public class Example3 {
String name = "Rajesh";
int age = 20;
}</code></pre>
                
                    <h5>Example :</h5>
                    <pre class="bg-black text-white p-3 border rounded"><code>public class Example4 {
public static void main(String[] args) {
    Example3 ex3 = new Example3();
    System.out.println("Name: " + ex3.name);
    System.out.println("Age: " + ex3.age);
    }
}</code></pre>
                    <p><strong>Output:</strong></p>
                    <pre class="bg-black text-white p-3 border rounded"><code>Name: Rajesh
Age: 20</code></pre>
                
                    <h4>ii. Class attributes/fields:</h4>
                    <p>Class attributes are the variables created inside a class.</p>
                    <h5>Example:</h5>
                    <pre class="bg-black text-white p-3 border rounded"><code>public class Example3 {
String name = "Rajesh";
int age = 20;
}</code></pre>
                    <p>Here name and age are attributes or fields of class Example3.</p>
                
                    <h5>Accessing Attributes:</h5>
                    <pre class="bg-black text-white p-3 border rounded"><code>public class Example1 {
String name = "Rajesh";
int age = 20;
public static void main(String[] args) {
    Example1 ex = new Example1();
    System.out.println("Name: " + ex.name);
    System.out.println("Age: " + ex.age);
}
}</code></pre>
                
                    <h5>Overriding Attributes:</h5>
                    <pre class="bg-black text-white p-3 border rounded"><code>public class Example1 {
String name = "Rajesh";
int age = 20;
                
public static void main(String[] args) {
    Example1 ex = new Example1();
    ex.age = 25;
    System.out.println("Name: " + ex.name);
    System.out.println("Age: " + ex.age);
}
}</code></pre>
                    <p><strong>Output:</strong></p>
                    <pre class="bg-black text-white p-3 border rounded"><code>Name: Rajesh
Age: 25</code></pre>
                
                    <h5>Using final Keyword:</h5>
                    <pre class="bg-black text-white p-3 border rounded"><code>public class Example1 {
final String name = "Rajesh";
final int age = 20;
                
public static void main(String[] args) {
    Example1 ex = new Example1();
    ex.name = "Sanjay"; // This will cause an error
    ex.age = 25; // This will also cause an error
    System.out.println("Name: " + ex.name);
    System.out.println("Age: " + ex.age);
}
}</code></pre>
                    <p><strong>Output:</strong></p>
                    <pre class="bg-black text-white p-3 border rounded"><code>Exception in thread "main" java.lang.Error: Unresolved compilation problems:
The final field Example1.name cannot be assigned
The final field Example1.age cannot be assigned</code></pre>
                
                    <h4>iii. Class Methods:</h4>
                    <p>Methods are a block of code that accept certain parameters and perform actions whenever they are called. Methods are always written inside a Java class and can be called by simply referring to the method name.</p>
                    <p><strong>In Java, we have public and static methods. So what is the difference between?</strong></p>
                    <p>Public methods are accessed by making objects of the class whereas static methods do not need objects to be accessed; we can directly access static methods.</p>
                
                    <h5>Example:</h5>
                    <pre class="bg-black text-white p-3 border rounded"><code>public class Example5 {
// public method
public void fruits() {
    String fruits[] = {"Apple", "Banana", "Mango", "Strawberry"};
    System.out.println("Fruits:");
    for (int i = 0; i < fruits.length; i++) {
        System.out.println(fruits[i]);
    }
}
// static method
static void vegetables() {
    String vegies[] = {"Onion", "Potato", "Carrot", "Radish"};
    System.out.println("Vegetables:");
    for (int i = 0; i < vegies.length; i++) {
        System.out.println(vegies[i]);
    }
}
                
public static void main(String[] args) {
    Example5 ex5 = new Example5(); // need to create object
    ex5.fruits();
    System.out.println();
    vegetables(); // no need to create obje}</code></pre>
                    <p><strong>Output:</strong></p>
                    <pre class="bg-black text-white p-3 border rounded"><code>Fruits:
Apple
Banana
Mango
Strawberry

Vegetables:
Onion
Potato
Carrot
Radish</code></pre>
                </div>

                <!-- code ends here -->
            </div>
        </div>
    </div>
    <%- include('../includes/footer.ejs') %>
</body>
</html>