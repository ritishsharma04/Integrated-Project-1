<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>java(oops)</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <!-- Icon Font Stylesheet -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css" rel="stylesheet">
</head>
<body>
    <%- include('../includes/nav.ejs') %>
    <%- include('../includes/subnav.ejs') %>
    <div class="container-fluid">
        <div class="row">
            
            <div class="menubox col col-2 border border-2 p-3" style="height: 600px; overflow: auto;">
                <%- include('./javanav.ejs') %>
            </div>
            <div class="col  border border-2" style="height: 600px; overflow: auto;">
                <!-- code starts here -->
                <div class="container-fluid px-2 px-md-8">
                    <div class="row mt-5 justify-content-between">
                        <h1 class="col text-3xl lg:text-4xl font-semibold text-gray-800 mb-1">Polymorphism</h1>
                    </div>
                    
                    <div class="pt-2 min-vh-100 text-gray-200">
                        <p>The word polymorphism is derived from the Greek words poly (meaning many) and morph (meaning form). Thus, polymorphism is the ability of an object to take more than one form.</p>
                        
                        <h3>Polymorphism is of two types:</h3>
                        <ul>
                            <li>Compile time polymorphism</li>
                            <li>Run time polymorphism</li>
                        </ul>
                        
                        <h3>i. Compile-time polymorphism:</h3>
                        <p>Java doesnâ€™t support operator overloading and hence compile-time polymorphism is not possible in Java.</p>
                        <p>But we can overload multiple functions with the same name and different parameters or different types of parameters.</p>
                        
                        <p><strong>Example:</strong></p>
                        <pre class="bg-dark text-white p-3 border rounded">
<code class="language-java">
    class AddMethods {
        static int AddNums(int a, int b) {
            return (a+b);
        }
        
        static int AddNums(int a, int b, int c) {
            return (a+b+c);
        }
        
        static double AddNums(double a, double b) {
            return (a+b);
        }
    }
    
    public class Example1 {
    
        public static void main(String[] args) {
            System.out.println("Addition of two integers: "+ AddMethods.AddNums(6, 11));
            System.out.println("Addition of three integers: "+ AddMethods.AddNums(6, 11, 5));
            System.out.println("Addition of two decimal numbers: "+ AddMethods.AddNums(6.3, 2.8));
        }
    }             
</code>
                        </pre>
                        
                        <h4>Output:</h4>
                        <pre class="bg-dark text-white p-3 border rounded">
<code>
    Addition of two integers: 17
    Addition of three integers: 22
    Addition of two decimal numbers: 9.1
</code>
                        </pre>
                        
                        <p>Here we have defined three methods with the same name, but the parameters passed inside each differ by either the data type or the number of arguments passed. And we get output from each of these methods based on the input provided.</p>
                        
                        <h3>ii. Run-time polymorphism:</h3>
                        <p>Run-time polymorphism or dynamic method dispatch involves overriding a method at run-time instead of compile-time.</p>
                        
                        <p><strong>Example:</strong></p>
                        <pre class="bg-dark text-white p-3 border rounded">
<code class="language-java">
    class Color {
        void paint() {
            System.out.println("I'm Painting.");
        }
    }
        
    class RedPaint extends Color {
        void paint() {
            System.out.println("I'm Painting with Red color.");
        }
    }
        
    class BluePaint extends Color {
        void paint() {
            System.out.println("I'm Painting with Blue color.");
        }
    }
    
    
    public class Example2 {
    
        public static void main(String[] args) {
            Color c;
            c = new RedPaint();
            c.paint();
            c = new BluePaint();
            c.paint();
        }
    }
</code>
                        </pre>
                        
                        <h4>Output:</h4>
                        <pre class="bg-dark text-white p-3 border rounded">
<code>
    I'm Painting with Red color.
    I'm Painting with Blue color.
</code>
                        </pre>
                        
                        <p>Child classes have overridden the method of the parent class. Hence, when we create an object of the child class, the method inside the child class is executed because it has more priority.</p>
                    </div>
                </div>
                
                <!-- code ends here -->
            </div>
        </div>
    </div>
    <%- include('../includes/footer.ejs') %>
</body>
</html>