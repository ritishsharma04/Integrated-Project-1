<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interview Questions</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <!-- Icon Font Stylesheet -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/tutorials.css">
    <style>
        ol li a{
            color: black;
        }
    </style>
</head>
<body>
    <%- include("../includes/nav.ejs") %>
    <%- include("../includes/interviewnav.ejs")%>
    <!-- code starts here -->
    <div class="container bg-white text-black p-4">
        <h1 class="display-6 mb-4">React.js Advanced Interview Questions</h1>
        <p class="mb-4">Here are some commonly asked advanced React.js interview questions:</p>
        
        <h4 class="h4 text-primary mb-2">1. What is the Virtual DOM, and how does it work in React?</h4>
        <p class="mb-4">Ans. The Virtual DOM is a lightweight copy of the actual DOM. React uses it to optimize rendering by updating only the parts of the DOM that have changed, rather than re-rendering the entire DOM tree.</p>
        
        <h4 class="h4 text-primary mb-2">2. What are React Hooks, and why were they introduced?</h4>
        <p class="mb-4">Ans. React Hooks are functions that let you use state and other React features in functional components. They were introduced to allow functional components to manage state and side effects without converting them to class components.</p>
        
        <h4 class="h4 text-primary mb-2">3. Explain the use of the `useEffect` hook.</h4>
        <p class="mb-4">Ans. The `useEffect` hook allows you to perform side effects in functional components, such as data fetching, subscriptions, or manually changing the DOM. It runs after the render and can be configured to run only when certain dependencies change.</p>
        
        <h4 class="h4 text-primary mb-2">4. What is the purpose of the `useMemo` and `useCallback` hooks?</h4>
        <p class="mb-4">Ans. The `useMemo` hook is used to memoize expensive calculations, preventing them from being recalculated on every render. The `useCallback` hook is used to memoize functions, preventing them from being recreated on every render unless their dependencies change.</p>
        
        <h4 class="h4 text-primary mb-2">5. What is the Context API in React?</h4>
        <p class="mb-4">Ans. The Context API is a way to manage state globally in a React application. It allows you to share values (like themes or user information) between components without having to pass props down through every level of the component tree.</p>
        
        <h4 class="h4 text-primary mb-2">6. How do you handle forms in React?</h4>
        <p class="mb-4">Ans. Forms in React can be handled using controlled components, where form data is managed by the component's state. You can use the `onChange` event to update the state and handle form submission with the `onSubmit` event.</p>
        
        <h4 class="h4 text-primary mb-2">7. What are higher-order components (HOCs) in React?</h4>
        <p class="mb-4">Ans. Higher-order components are functions that take a component and return a new component with additional props or functionality. They are used for code reuse and to enhance components without modifying their original implementation.</p>
        
        <h4 class="h4 text-primary mb-2">8. Explain the concept of "lifting state up" in React.</h4>
        <p class="mb-4">Ans. "Lifting state up" refers to the practice of moving state from a child component to a parent component to share data between sibling components. This allows the parent to manage the state and pass it down as props.</p>
        
        <h4 class="h4 text-primary mb-2">9. What is the difference between controlled and uncontrolled components?</h4>
        <p class="mb-4">Ans. Controlled components are form elements whose value is controlled by React state, while uncontrolled components store their own state internally. Controlled components provide better control and validation over form data.</p>
        
        <h4 class="h4 text-primary mb-2">10. How do you optimize performance in a React application?</h4>
        <p class="mb-4">Ans. Performance optimization in React can be achieved through techniques such as using the Virtual DOM, memoization with `React.memo`, code splitting with dynamic imports, lazy loading components, and avoiding unnecessary re-renders.</p>
        
        <h4 class="h4 text-primary mb-2">11. What is React Router, and how does it work?</h4>
        <p class="mb-4">Ans. React Router is a library for routing in React applications. It allows you to define routes and navigate between different components based on the URL. It uses the concept of "routes" to render specific components for specific paths.</p>
        
        <h4 class="h4 text-primary mb-2">12. What are fragments in React?</h4>
        <p class="mb-4">Ans. Fragments are a way to group multiple elements without adding extra nodes to the DOM. They allow you to return multiple elements from a component without wrapping them in a parent element.</p>
        
        <h4 class="h4 text-primary mb-2">13. How do you handle error boundaries in React?</h4>
        <p class="mb-4">Ans. Error boundaries are React components that catch JavaScript errors in their child component tree and log those errors, displaying a fallback UI instead of crashing the entire application. They are implemented using the `componentDidCatch` lifecycle method.</p>
        
        <h4 class="h4 text-primary mb-2">14. What is the purpose of the `key` prop in React?</h4>
        <p class="mb-4">Ans. The `key` prop is used to uniquely identify elements in a list. It helps React optimize rendering by allowing it to track changes, additions, and removals of elements efficiently.</p>
        
        <h4 class="h4 text-primary mb-2">15. What is the difference between `useState` and `useReducer` hooks?</h4>
        <p class="mb-4">Ans. The `useState` hook is used for managing simple state in functional components, while the `useReducer` hook is used for managing more complex state logic, especially when the state depends on previous values or involves multiple sub-values.</p>
        
        <h4 class="h4 text-primary mb-2">16. How do you implement lazy loading in React?</h4>
        <p class="mb-4">Ans. Lazy loading in React can be implemented using the `React.lazy()` function and the `Suspense` component. This allows you to load components only when they are needed, improving the initial load time of the application.</p>
        
        <h4 class="h4 text-primary mb-2">17. What are the differences between class components and functional components?</h4>
        <p class="mb-4">Ans. Class components are ES6 classes that extend `React.Component` and can hold state and lifecycle methods. Functional components are simpler functions that can use hooks for state and lifecycle management but do not have their own state or lifecycle methods by default.</p>
        
    </div>
    <!-- code ends here -->
    <%- include('../includes/footer.ejs') %>
</body>
</html>